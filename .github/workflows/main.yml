name: Checks and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, edited, ready_for_review]
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: awsccph-scd
  CLOUDFRONT_DISTRIBUTION_ID: E3KORYPPQ9K07A
  LAMBDA_FUNCTION_NAME: awsccph-scd
  IMAGE_TAG: latest

permissions:
  id-token: write
  contents: read

jobs:
  checks:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: List dependencies
        if: ${{ steps.cache-deps.outputs.cache-hit != 'true' }}
        continue-on-error: true
        run: bun pm ls

      - name: Install dependencies
        run: bun ci

      - name: Run type checking
        run: bun run check-types

      - name: Check formatting
        run: bun run format

      - name: Run linter and fix issues
        run: bun eslint --fix

  deploy:
    runs-on: ubuntu-24.04-arm
    needs: checks
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::876497563387:role/SCD2025
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image (ARM64)
        run: |
          # Build the Docker image for ARM64 architecture and tag it as 'latest'
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          # Push the image tagged as 'latest' to ECR
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        env:
          DOCKER_BUILDKIT: 1

      - name: Update Lambda function container image
        run: |
          # Use update-function-code to change the container image
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: Invalidate CloudFront cache
        run: |
          # Create a CloudFront invalidation for all paths (/*)
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
